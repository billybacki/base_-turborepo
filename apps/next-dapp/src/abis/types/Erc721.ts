/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export interface Erc721Interface extends utils.Interface {
  functions: {
    '__Governable_init_unchained(address)': FunctionFragment
    '__TestNFT_init(address,string,string)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'baseURI()': FunctionFragment
    'burn(uint256)': FunctionFragment
    'getApproved(uint256)': FunctionFragment
    'getConfig(bytes32)': FunctionFragment
    'getConfigA(bytes32,address)': FunctionFragment
    'getConfigI(bytes32,uint256)': FunctionFragment
    'governor()': FunctionFragment
    'isApprovedForAll(address,address)': FunctionFragment
    'mint(address,uint256,string)': FunctionFragment
    'name()': FunctionFragment
    'ownerOf(uint256)': FunctionFragment
    'renounceGovernorship()': FunctionFragment
    'safeTransferFrom(address,address,uint256)': FunctionFragment
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment
    'setApprovalForAll(address,bool)': FunctionFragment
    'setConfig(bytes32,uint256)': FunctionFragment
    'setConfigA(bytes32,address,uint256)': FunctionFragment
    'setConfigI(bytes32,uint256,uint256)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'symbol()': FunctionFragment
    'tokenByIndex(uint256)': FunctionFragment
    'tokenOfOwnerByIndex(address,uint256)': FunctionFragment
    'tokenURI(uint256)': FunctionFragment
    'totalSupply()': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferGovernorship(address)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | '__Governable_init_unchained'
      | '__TestNFT_init'
      | 'approve'
      | 'balanceOf'
      | 'baseURI'
      | 'burn'
      | 'getApproved'
      | 'getConfig'
      | 'getConfigA'
      | 'getConfigI'
      | 'governor'
      | 'isApprovedForAll'
      | 'mint'
      | 'name'
      | 'ownerOf'
      | 'renounceGovernorship'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'setApprovalForAll'
      | 'setConfig'
      | 'setConfigA'
      | 'setConfigI'
      | 'supportsInterface'
      | 'symbol'
      | 'tokenByIndex'
      | 'tokenOfOwnerByIndex'
      | 'tokenURI'
      | 'totalSupply'
      | 'transferFrom'
      | 'transferGovernorship'
  ): FunctionFragment

  encodeFunctionData(functionFragment: '__Governable_init_unchained', values: [string]): string
  encodeFunctionData(functionFragment: '__TestNFT_init', values: [string, string, string]): string
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(functionFragment: 'baseURI', values?: undefined): string
  encodeFunctionData(functionFragment: 'burn', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getConfig', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'getConfigA', values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: 'getConfigI', values: [BytesLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'governor', values?: undefined): string
  encodeFunctionData(functionFragment: 'isApprovedForAll', values: [string, string]): string
  encodeFunctionData(functionFragment: 'mint', values: [string, BigNumberish, string]): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'renounceGovernorship', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [string, string, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'setApprovalForAll', values: [string, boolean]): string
  encodeFunctionData(functionFragment: 'setConfig', values: [BytesLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'setConfigA', values: [BytesLike, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'setConfigI', values: [BytesLike, BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(functionFragment: 'tokenByIndex', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'tokenOfOwnerByIndex', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'transferGovernorship', values: [string]): string

  decodeFunctionResult(functionFragment: '__Governable_init_unchained', data: BytesLike): Result
  decodeFunctionResult(functionFragment: '__TestNFT_init', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'baseURI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getConfigA', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getConfigI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'governor', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceGovernorship', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256)', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'safeTransferFrom(address,address,uint256,bytes)', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setConfigA', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setConfigI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenByIndex', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenOfOwnerByIndex', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferGovernorship', data: BytesLike): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'ApprovalForAll(address,address,bool)': EventFragment
    'GovernorshipTransferred(address,address)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'GovernorshipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
}

export interface ApprovalEventObject {
  owner: string
  approved: string
  tokenId: BigNumber
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface ApprovalForAllEventObject {
  owner: string
  operator: string
  approved: boolean
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>

export interface GovernorshipTransferredEventObject {
  previousGovernor: string
  newGovernor: string
}
export type GovernorshipTransferredEvent = TypedEvent<[string, string], GovernorshipTransferredEventObject>

export type GovernorshipTransferredEventFilter = TypedEventFilter<GovernorshipTransferredEvent>

export interface TransferEventObject {
  from: string
  to: string
  tokenId: BigNumber
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface Erc721 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: Erc721Interface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    __Governable_init_unchained(
      governor_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    __TestNFT_init(
      governor: string,
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    approve(to: string, tokenId: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>

    baseURI(overrides?: CallOverrides): Promise<[string]>

    burn(tokenId: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    getConfig(key: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>

    getConfigA(key: BytesLike, addr: string, overrides?: CallOverrides): Promise<[BigNumber]>

    getConfigI(key: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    governor(overrides?: CallOverrides): Promise<[string]>

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<[boolean]>

    mint(
      to: string,
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    name(overrides?: CallOverrides): Promise<[string]>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    renounceGovernorship(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    setConfig(
      key: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    setConfigA(
      key: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    setConfigI(
      key: BytesLike,
      index: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>

    symbol(overrides?: CallOverrides): Promise<[string]>

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    tokenOfOwnerByIndex(owner: string, index: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>

    transferGovernorship(newGovernor: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>
  }

  __Governable_init_unchained(
    governor_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  __TestNFT_init(
    governor: string,
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  approve(to: string, tokenId: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

  baseURI(overrides?: CallOverrides): Promise<string>

  burn(tokenId: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  getConfig(key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  getConfigA(key: BytesLike, addr: string, overrides?: CallOverrides): Promise<BigNumber>

  getConfigI(key: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  governor(overrides?: CallOverrides): Promise<string>

  isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>

  mint(
    to: string,
    tokenId: BigNumberish,
    tokenURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  name(overrides?: CallOverrides): Promise<string>

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  renounceGovernorship(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  'safeTransferFrom(address,address,uint256)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  setConfig(
    key: BytesLike,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  setConfigA(
    key: BytesLike,
    addr: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  setConfigI(
    key: BytesLike,
    index: BigNumberish,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>

  symbol(overrides?: CallOverrides): Promise<string>

  tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  tokenOfOwnerByIndex(owner: string, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>

  transferGovernorship(newGovernor: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>

  callStatic: {
    __Governable_init_unchained(governor_: string, overrides?: CallOverrides): Promise<void>

    __TestNFT_init(governor: string, name: string, symbol: string, overrides?: CallOverrides): Promise<void>

    approve(to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    baseURI(overrides?: CallOverrides): Promise<string>

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    getConfig(key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    getConfigA(key: BytesLike, addr: string, overrides?: CallOverrides): Promise<BigNumber>

    getConfigI(key: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    governor(overrides?: CallOverrides): Promise<string>

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>

    mint(to: string, tokenId: BigNumberish, tokenURI: string, overrides?: CallOverrides): Promise<void>

    name(overrides?: CallOverrides): Promise<string>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    renounceGovernorship(overrides?: CallOverrides): Promise<void>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    setApprovalForAll(operator: string, approved: boolean, overrides?: CallOverrides): Promise<void>

    setConfig(key: BytesLike, value: BigNumberish, overrides?: CallOverrides): Promise<void>

    setConfigA(key: BytesLike, addr: string, value: BigNumberish, overrides?: CallOverrides): Promise<void>

    setConfigI(key: BytesLike, index: BigNumberish, value: BigNumberish, overrides?: CallOverrides): Promise<void>

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>

    symbol(overrides?: CallOverrides): Promise<string>

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    tokenOfOwnerByIndex(owner: string, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transferFrom(from: string, to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>

    transferGovernorship(newGovernor: string, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'Approval(address,address,uint256)'(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter
    Approval(owner?: string | null, approved?: string | null, tokenId?: BigNumberish | null): ApprovalEventFilter

    'ApprovalForAll(address,address,bool)'(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter
    ApprovalForAll(owner?: string | null, operator?: string | null, approved?: null): ApprovalForAllEventFilter

    'GovernorshipTransferred(address,address)'(
      previousGovernor?: string | null,
      newGovernor?: string | null
    ): GovernorshipTransferredEventFilter
    GovernorshipTransferred(
      previousGovernor?: string | null,
      newGovernor?: string | null
    ): GovernorshipTransferredEventFilter

    'Transfer(address,address,uint256)'(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter
    Transfer(from?: string | null, to?: string | null, tokenId?: BigNumberish | null): TransferEventFilter
  }

  estimateGas: {
    __Governable_init_unchained(governor_: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    __TestNFT_init(
      governor: string,
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    approve(to: string, tokenId: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    baseURI(overrides?: CallOverrides): Promise<BigNumber>

    burn(tokenId: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getConfig(key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    getConfigA(key: BytesLike, addr: string, overrides?: CallOverrides): Promise<BigNumber>

    getConfigI(key: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    governor(overrides?: CallOverrides): Promise<BigNumber>

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<BigNumber>

    mint(
      to: string,
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    renounceGovernorship(overrides?: Overrides & { from?: string }): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    setConfig(key: BytesLike, value: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>

    setConfigA(
      key: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    setConfigI(
      key: BytesLike,
      index: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    tokenOfOwnerByIndex(owner: string, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>

    transferGovernorship(newGovernor: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>
  }

  populateTransaction: {
    __Governable_init_unchained(
      governor_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    __TestNFT_init(
      governor: string,
      name: string,
      symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    approve(to: string, tokenId: BigNumberish, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>

    burn(tokenId: BigNumberish, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getConfig(key: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getConfigA(key: BytesLike, addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getConfigI(key: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    mint(
      to: string,
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceGovernorship(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    setConfig(
      key: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    setConfigA(
      key: BytesLike,
      addr: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    setConfigI(
      key: BytesLike,
      index: BigNumberish,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenOfOwnerByIndex(owner: string, index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>

    transferGovernorship(newGovernor: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>
  }
}
